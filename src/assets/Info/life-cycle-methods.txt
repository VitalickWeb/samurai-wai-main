componentDidMount

Class нам нужен для того, чтобы создавать объекты. Классовая компонента нужна для того чтобы создавать объект
посредник и взаимодействовать дальше с этим объектом посредником, который react просит у него JSX разметку.

Любая компонента расширяет некоторую базовую классовую компоненту, в котрой есть какие-то предопределенные
методы, например render() и какой JSX вернет метод.
React видит какого-то мэна к примеру которого ему нужно отрисовать, создает объект и говорит, объект, я
теперь с тобой буду взаимодействовать, постоянно тебя пинать - по сути происходит инверсия управления то есть
наш код написан в компоненте, но код не выполняется сам по себе, он выполняется тогда когда его пнет кто-то
извне.
    Соответственно react пинает m1.render() чтобы он отрисовался или m1.xxx() потому что xxx определен в
    родительской компоненте, то есть Man тоже умеет делать все методы которые определены в родительской
    компоненте через extend React.Component наследование.
let m1 = new Man({
    name: 'Vit',
    age: 32
});
let jsx = m1.render();
m1.xxx()

    Рассмотрим настоящие методы которые сидят внутри компоненты: 1)componentDidMount(), 2)componentDidUpdate
они относятся к методам жизненного цикла. Так как у любой компоненты есть эти 2 метода, react может вызывать
их когда они понадобятся, так как React управляет всем, а компоненты зависимы от реакта. React создает
компоненту через new, потом начинает ее пинать - компонента дай мне свой JSX, потом условно говорю JSX
превратись в DOM и этот дом закидываю в HTML и отрисовыаю.
    Компонента понятия не имеет, что происходит с тем JSX который она выплюнула из себя из render через
return, но ей нужно знать, потому что от этого зависит какое-то поведение компоненты, для этого в компоненте
есть методы жизненного цикла, которые react может дергать как веревочки, для того чтобы компоненте что-то
сообщить, например компонента DidMount ты была в монтирована - вставлена в html и отрисована.

    В классовой компоненте сначала всегда будет конструктор, потому что объект не родится пока конструктор
не вызовется.
    Потом react захочет вызвать компоненту - отрисовать, но он не может еще ее вмонтировать потому что
у нее еще нет JSX, поэтому он вызовет render() который вернет JSX, react получит JSX потом он начнет
вставлять компоненту и когда он ее вставит, он скажет, componentDidMount и вмонтирует ее.
    Метод жизненного цикла означает что объект живет, как человек например у которого есть разные события.
componentDidMount - это то место где нужно делать все сайд эффекты например как запрос на сервер,
работа с DOM, если мы хотим напрямую обратиться к DOM элементам по querySelector, setTimout или
setInterval.
    Если у нас классовая компонента то react понимает, что мне создать новый объект для этой компоненты
Man например мы его перерисовать хотим, такого же Man, react не будет создавать новый объект, а возьмет
этот же самый объект который отвечал за того Man и его же будет использовать, потому что это по сути
тот же объект Man перерисовывается, поэтому объект не создается дважды. Соответственно не происходит
append() так ак вмонтирование произошло, то дальше уже происходят апдэйты.
    React находит DOM - который там уже есть, его обновляет новым html.
    Когда компонента переключается с компоненты на компоненту, каждый раз будет componentDidMount
    срабатывать, и мы можем сделать аякс запрос за пользователями и отобразить их.