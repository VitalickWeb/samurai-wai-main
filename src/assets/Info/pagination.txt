Pagination - постраничный вывод
    На сервере очень большое количество данных. Мы например делаем get запрос в адресной строке
или шлем аякс запрос с помощью библиотеки axios - на пользователей. Нам сервер соответственно
не может отправить все количество пользователей, так как трафик будет забит сервер ляжет и
все зависнет. Поэтому сервер разобьет пользователей на части и вернет только одну часть - одну страницу.
    Когда мы в адресной строке браузера что-то вбиваем автоматически на сервер идет get запрос
все что мы можем передать на сервер от клиента, должно зашиваться в этот URL адрес, ставим вопросительный
знак в конце адреса ? и добавляем ключ значение через равно pageNumber=2 все вместе: ?pageNumber=2 - это
называется get параметры. Идет запрос на вторую страницу.
    Почему pageNumber? Это определяет сервер, серверный разработчик определяет API - интерфейс взаимодействия
с какой-нибудь программой. Программный сервер с ним взаимодействует. Вообщем в документации должно быть
написано какие get параметры должны отправляться на сервер. После этого мы делаем выбор по страницам 1, 2, 3.
    Сервер может дробить разными частями, но нам например нужно по три или четыре единицы. Как дробит
сервер, тоже нужно смотреть в документации серверной API. Сервер поддерживает гибкое указание размера страницы
и в пагинации будет отображаться столько страниц на сколько поделит сервер частей.

    Смотрим в документации social network get request query parameters, которые можно отправить с запросом.
Так как это get запрос то так как у нас кроме query parameters возможностей других нет, потому что гет запрос,
это просто тупая строка в адресной строке браузера. Соответственно мы можем отправить: count - page size
(размер страницы), page номер страницы, term и friend. Вводим эти гет параметры в поисковую строку браузера.
https://social-network.samuraijs.com/api/1.0/users?page=3
    Если нужно задать размер страницы то можно например сказать 2 и дописываем &count=2
    https://social-network.samuraijs.com/api/1.0/users?page=3&count=2. для чего ставим амперсанд, потому что
get параметры начинаются после вопросительного знака, должен быть один вопр. знак, все что с права от него - это
гет параметры. Если параметр один, то он один, ключ значение, если  параметра, то разделяем амперсандом &, если три
то еще ставим амперсанд. users?page=3&count=2&term=t и т.д. Итог: вставляя в гет запрос эти правила мы можем
корректировать размер порций и номер порций которые мы хотим получить. Соответственно сколько мы зададим столько
и получим. &count=2 то получим 2 объекта.
    Берем totalCount: 54 и делим на размер страницы 2 и получаем сколько всего страниц.
    Когда мы проектируем какую либо страницу, сразу отправляемся в бизнес логику.
    Меняем и тестируем код меняя бизнес логику и смотрим как реагирует UI.
    componentDidMount - единственное место где можно делать сайд эффекты.

    С чего начинать разработку, в бизнес логике чтобы проверить, как все работает, хардкодом вставляем:
     pageSize: 5
     totalUsersCount: 0
     и прокинем это в нашу контейнерную компоненту mapStateToProps.

     Делаем по нажатию кнопки текущей страницы в пагинации и выделяем текущую.
 Там же в бизнес логике добавляем:
 currentPage: 1, всегда запрашиваем первую страницу.

