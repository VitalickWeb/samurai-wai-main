Презентационная и контейнерная компоненты!

Презентационная компонента в react должна быть функциональной, принимать пропсы и возвращать jsx разметку.
Идея чистой функции такая, что она получает результат только на основе входящих данных. Это делает ее
детерменированной - предсказуемой так как принимает одни пропсы и возвращает фиксированную JSX разметку.
Поэтому мы можем спрогнозировать что функцию вернет и протестировать эту функцию.
К примеру: предаем в пропссах 5 пользователей, и она должна отрисовать 5 пользователей, у двух пользователей
есть картинки URL а у других нет, и все это должны мы видеть на UI.
    Так как наша компонента делает AJAX запрос, та которая не функциональная, а классовая - делает в жизненном
цикле componentDidMount AJAX запрос на сервер. AJAX запрос является сайд эффектом, что не приемлемо для
чистоты функции, и сбивает с толку как ее тестировать. Когда компонента черезчур умная и делает какие-то еще
запросы. Ajax запросы медленные, соответственно если мы напишем сто тестов и у нас в ста тестах эти ajax запросы
то тогда тест не пройдет за 2 секунды, а пройдет за гораздо большее количество времени. Так как до появления хуков
сайд эффект запрещен поэтому используем классовую компоненту и метод жизненного цикла componentDidMount в котором
и надо делать все сайд эффекты.
   До появления ajax запросов компонента была чистой обернутой в контейнерную компоненту функция, которая
обращается к store на прямую. С помощью mapStateToProps и mapDispatchToProps из store мы берем данные и формируем
колбэки прокидывая их в нашу презентационную компоненту с помощью connect создаем новую компоненту прокидывая ей
старую. И все что делает контейнерная компонента это отрисовывает внутри себя презентационную компоненту. Получается
в APP мы работаем с контейнерной компонентой в которой нет ни какой визуализации. Ее задача, обеспечить связь со
store и прокидывание в презентационную компоненту пропсы, а она в свою очередь дает нам JSX.
    Но теперь компонента презентационная ввиду того что она стала умной делая запрос на сервер, становится тоже
контейнерной компонентой, которая в свою очередь делает грязную работу. И мы должны уже прокидывать из нее пропсы
в презентационную компоненту. Так как нам нужна чистая компонента и нам нужно ее уметь тестировать потому что
она возвращает JSX и нам возможно понадобиться ее переиспользовать в разных местах. Поэтому нужно вынести JSX
из контейнерной компоненты в другую компоненту которая будет чистой. В итоге получаем одну контейнерную компоненту
в которой будет еще одна контейнерная и в ней уже чистая презентационная компонента.
1)Первая контейнерная компонента нужна для связи со store.
2)Вторая контейнерная компонента вложенная в первую нужна для запросов на сервер.
3)третья презентационная компонента вложенная во вторую нужна для отрисовки JSX.
    Так как нам не нужны 2 контейнерные компоненты, то нужно переместить функционал второй компоненты в первую!
В итоге получили одну контейнерную компоненту для связи со store и для запросов на сервер. Которая
подключается через connect. А в ней чрез пропсы отрисовывает презентационная компонента.

    Контейнерная компонента может до-стучатся до store благодаря contextAPI