Классовые компоненты. Просмотреть 36, 53 урок
Классы нужны для того, чтобы создавать однотипные объекты на базе этих классов.
И для того что бы можно было реализовывать концепции ООП: наследование, инкапсуляция, полиморфизм.

Отличие функциональной компоненты от классовой:
Функциональная компонента это функция, которая принимает props и возвращает JSX.
Раз это функция, то ее нужно вызвать, функция в react не вызывается в ручную, react вызывает ее
автоматически.
Используя connect кажется что пропсы берутся из неоткуда в компоненте, тот же connect внутри так
устроен, что пропсы прокидываются только через атрибуты "<App attr={""}>". Соответственно,
если мы прокидываем какие-то пропсы, то react вызывает нашу функцию, прокидывает объект с
пропсами и получает на выходе JSX который отрисовывает нам разметку:
1)Функцию вызывает react
2)react прокидывает в нее пропсы
3)react получает из этой функции JSX
4)react потом этот JSX отрисовывает.

прочитать на лерн js про классы и конструкторы!
Конструктор принимает 2 параметра
класс это как некоторое описание объекта в который будут создаваться с помощью этого класса
каждый объект будет обладать свойством имя и свойством возраст/

Классы как правило называются существительными.
с помощью class man мы например можем создать три объекта которые создаются с помощью new Man
class Man {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
}
let m1 = new Man('Vit', 41)
let m1 = new Man('Vera', 40)
let m1 = new Man('Max', 28)

Каждый раз когда мы пишем new и название класса, то в памяти создается новый объект.
Так как constructor принимает 2 параметра то мы эти 2 параметра прокидываем сюда new Man('Vit', 41).
Class это инструкция, которая является функцией для того, чтобы создавать что-либо.
Которая говорит какие объекты, что они могут уметь делать, из чего они будут состоять.
В примере выше она состоит из 2ух свойств name и age.
Функция же в свою очередь является объектом.

Если у объектов есть методы и объекты умеют что-то делать, например класс Man говорит что
объекты с помощью меня будут иметь свойство name и age и так же объекты будут уметь рендериться.
То есть можно будет объекту дать команду например рендер, и метод render вернет JSX и дальше
можно будет взять этот JSX и с ним, что-то делать.
let m1 = new Man('Vit', 41)
let JSX = m1.render()

Класс как классовая компонента, которая в конструкторе будет принимать один объект props.
class Man {
    constructor(props) {
        this.props = props;
    }
}

Объекты экземпляра класса мы создаем в ручную, но создавать new Man к примеру мы не будем,
а за нас его создаст react. React видит, в JSX написал кто-то <Header />, он начинает искать
header это функциональная компонента и он ее вызывает, как функцию и передает в нее пропсы.
Потом он видит в JSX компоненту <Man /> Man это класс, значит я сейчас создам на базе этого
класса объект и буду с ним дальше взаимодействовать и говорить эй отрендери мне JSX.
    В свою очередь объект нам нужен для того что бы на него повесить какую-то зону
ответственности, чтобы что-то этот объект делал полезное и мы с ним могли взаимодействовать.

У нашего класса есть конструктор, который принимает данные и инициализирует свойства в этом
объекте, есть какой-то метод: render() к пропсам мы обращаемся внутри рендера через this.props
то есть пропсы не приходят как параметр метода в функциональную компоненту, пропсы являются
частью объекта this созданного с помощью класса, то есть этого объекта с которым сейчас идет
взаимодействие в коде, каждый раз нам this автоматически подставляет нам нужный объект с которым
конкретно идет выполнение какого-то сценария, соответственно пропсы приходят в this.props = props
и мы пропсы эти присваиваем. Дальше в рендере чтобы обращатся к этим пропсам, мы обращаемся к
this.props.name например, и происходит то что мы передаем new Man и говорим отрендерись.

class Man {
    constructor(props) {
        this.props = props;
    }
     render() {
        return (
            <div>
                {this.props.name} {this.props.age}
            </div>
        )
     }
}

В реальной жизни мы пишем так:
class Man extends React.Component<type> {
    constructor(props)
    super(props)
}
Наша компонента классовая, чтобы быть реальной компонентой должна от-наследоваться от какого-то другого
класса - расширить какой-то другой класс, базовый класс который уже существует - React.Component.
Это называется наследование. Почему такое происходит, потому что уже есть какой-то стандартный
базовый фундамент, базовая логика и мы хотим ее расширить специфическим поведением.
    Конструирование объекта это метод который вызывается во время new Man, чтобы сконструировать объект,
создать память и заполнить его свойствами.
    Когда у нас есть наследование, мы должны сконструировать не только свой объект, мы должны
сконструировать еще тот объект в котором мы наследуемся, чтобы он тоже в памяти родился, и забирать
его поведение себе по наследованию. Соответственно мы внутри своего конструктора вызываем, super(props)
это зарезервированное слово обозначающее родительский конструктор от которого мы наследовались.
    Мы вызываем этот super(props) и вызывается в данном случае new React.Component в него передаются
пропсы и там компонент делает стандартные вещи которая делает любая компонента. Там происходят разные
вещи которые инкапсулированы. Мы просто отнаследовались и передали инициализацию - конструирование
стартовое родительской компоненте чтобы она завершила работу.
    Если наш конструктор ни чего не конструирует своеобразного своего на данный момент для нашего
Man например, а только передает управление родительской компоненте, то тогда конструктор вообще
можно не писать.
    Чтобы не использовать метод bind() нужно в классовых компонентах писать следующий синтаксис
    писать методы и обработчики так - onClick = () => { 0... }

    Компонента это чистая функция которая получает пропсы и возвращает JSX.
    class наследуется от React.Component и у которого есть как минимум метод render() - который
    возвращает JSX.

    Если мы в рамках страницы делаем какие то телодвижения, которые заставляют реакт перерисовывать JSX
    JSX будет перегенерироватся новый, но конструирование объекта не будет. поэтому проверка на if
    if (this.props.users.length === 0) уже не нужна. При загрузке будем получать пользователей

    При взаимодействии с элементами на странице  в стэйт, что то диспатчится стэйт меняется,
    перерисовка происходит, но компонента новая не формируется - реакт понимает, что я уже создал
    объект и буду взаимодействовать с этим объектом, но если мы уходим на другую страницу, то
    роутер убивает эту компоненту, если мы вернемся на эту страницу то если тот объект умер,
    а меня просят опять создать новый объект, реакт создаст этот объект в памяти и этот объект
    попрошу отрендерится.

    На самом деле аякс запросы делаются не в конструкторе как правило, потому что конструкторы
    не являются методом жизненного цикла, для этого используют другие места куда можно вклинится
    чтобы сделать запрос.