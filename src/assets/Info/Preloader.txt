PRELOADER

    Preloader - это пред загрузочная анимационная картинка, которая становится вместо изображения,
которое еще не загрузилось. Это важная часть интерфейса UX дизайна, так как пользователь должен что-то
видеть, что что-то происходит, что бы пользователь ожидал загрузки изображения и т.д.
    Все что на UI меняется, должно меняться только после того как изменится state. Поэтому, если preloader
показывается или нет, зависит от state. Так как он или показывается или нет, будет зависеть от логики
boolean - true or false. То есть запрос идет или нет.

    #########################################################################
    Во вкладке консоли браузера network есть вкладка No throttling в ней можно
    менять скорость интернета для теста как срабатывает preloader. Для этого
    выбираем 3G slow. Будет имитироваться медленное соединение.
    #########################################################################

    Когда запрос уходит на сервер, то в state должно изменится какое-то поведение, Мы нажали на кнопку на UI,
UI должен задиспатчить что-то в state и сказать что мы сейчас будем делать ajax запрос, соответственно у нас
UI должен отобразить preloader, но preloader может отобразится только если в state придет какое-то обновленное
значение. Поэтому мы должны в месте с ajax запросом отправить в state dispatch и сказать isFetching или isLoading.
    Когда данные ajax получатся то придет в then ответ, что диспатчим что isFetching false больше не получаем данные
и preloader исчезнет.
    Всегда смотрим на UI если что-то меняется, то сразу думаем что для этого чего-то меняющегося на UI должно быть
    в state какое свойство, числа, булен, массивы данных, строки.
isFetching придет в компоненту которую мы оборачиваем connect() придет в (UserContainer);
В свою очередь UserContainer это классовая компонента которая делает запрос, которая так же должна прокинуть
isFetching в компоненту Users, чтобы отобразить на UI isFetching, которую качаем из интернета loading svg.