Делаем в компоненте profile API AJAX

Со страницы user кликая по любому аватару юзера нужно перейти на страницу profile этого user.
Такие вещи делаются в react с помощью <NavLink/> по нажатию на обернуты навлинком элемент произойдет переход
на ту страницу, на которую нам надо.
    Нужно чтобы когда мы наводим на элемент появлялся URL адреса, для того что бы например скопировать ссылку
в буфер обмена, или открыть в новой вкладке.
Обязательно смотрим в документации, что возвращает сервер. В данном случае смотрим что приходит в response.

    ############################################################################################
    Ставим расширение в браузере Json Formatter, для упорядоченного просмотра данных. Заходим в
    extensions - настройки браузера сверху -> More tools -> Extensions -> Bar настройки ->
    Open chrome web store -> вбиваем в поисковик json viewer и устанавливаем json Formatter.
    ############################################################################################

    Если в роутингах стоит например "/profile" то после этого слова если мы напишем что угодно то
    нас выведет все равно на страницу profile.

Информация для размышления:
Видим что у нас постоянно попадая на компоненту идет перезагрузка данных, хотя теоретически можно было
бы доставать их как бы из кэша - из state нашего. Проверить в componentDidMount возможно там не пустой массив
возможно какие то данные установлены и может не надо делать первый запрос, а показать сразу то что есть.

Загружаем аватарку и описание.

Смотрим что нам предоставляет API по работе с profile. Видим там есть /users и /profile и теперь к базовому URL
https://social-network.samuraijs.com/api/1.0 нужно прикрепить profile и user если мы хотим с этим работать.

Смотрим что по URL profile прикреплен какой-то статус и видим текстовый статус запрошенного пользователя.
Смотрим второй profile возвращает информацию профиля пользователя пользователя.
Смотрим что есть в get запросе Request -> URI parameters - чтобы не делать get параметры встраивают {userId}
как часть URL то есть это уже не query строка через вопр. знак. То что меняется через вопросительный знак
это небольшая добавочка которая по факту как бы сам URL фиксированный "endpoint" не меняет.
    Когда идет речь про URI parameters, технически меняется URL "endpoint" соответственно как бы другой URL
Просто к профилю мы должны пределать id пользователя сделать гет запрос и получить пользователя.
    HTTP status code 200 - это значит что сервер без ошибки вернул ответ.


Делаем get запрос в компоненте profile. В компоненте профайл нельзя делать гет запрс на прямую так как
это чистая функция, поэтому нужно сделать контейнерную классовую компоненту, где этот запрос будем делать
в componentDidMount. Чтобы реакт понимал взаимодействовал с этим классом как с производителем компонент
нужно его за 'extend React.Component' экстэндить.
    Весь profile делаем контейнером потому что и загружаемые посты и отображаемая информация должны
зависеть от того чей профиль мы сейчас просматриваем. Прокидываем в презентационную компоненту пропсы.
    Чтобы прокинуть все пропсы которые пришли в контейнерную компоненту {...this.props} раскидываем в спред
операторе как атрибуты для профиля пропсы. Пропс который приходит в компоненту собирается из атрибутов,
тоесть проп который приходит в компоненту это объект, который собирается из атрибутов. Если мы напишем
вот так props={this.props} A={14} то у нас в пропсах которые придут в профайл будет свойство A = 14
и свойство props в props равный объекту который пришел извне то есть не то что нужно. Поэтому обязательно
используем спред оператор {...this.props} - то есть мы должны взять пропсы которые пришли в нас раскукожить
и вставить как атрибуты в компоненту.